{"ast":null,"code":"var merge = require('utils-merge');\nfunction SessionManager(options, serializeUser) {\n  if (typeof options == 'function') {\n    serializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  this._key = options.key || 'passport';\n  this._serializeUser = serializeUser;\n}\nSessionManager.prototype.logIn = function (req, user, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n  var self = this;\n  var prevSession = req.session;\n\n  // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n  req.session.regenerate(function (err) {\n    if (err) {\n      return cb(err);\n    }\n    self._serializeUser(user, req, function (err, obj) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      if (!req.session[self._key]) {\n        req.session[self._key] = {};\n      }\n      // store user information in session, typically a user id\n      req.session[self._key].user = obj;\n      // save the session before redirection to ensure page\n      // load does not happen before session is saved\n      req.session.save(function (err) {\n        if (err) {\n          return cb(err);\n        }\n        cb();\n      });\n    });\n  });\n};\nSessionManager.prototype.logOut = function (req, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  if (!req.session) {\n    return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n  var self = this;\n\n  // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n  if (req.session[this._key]) {\n    delete req.session[this._key].user;\n  }\n  var prevSession = req.session;\n  req.session.save(function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n    req.session.regenerate(function (err) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      cb();\n    });\n  });\n};\nmodule.exports = SessionManager;","map":{"version":3,"names":["merge","require","SessionManager","options","serializeUser","undefined","_key","key","_serializeUser","prototype","logIn","req","user","cb","session","Error","self","prevSession","regenerate","err","obj","keepSessionInfo","save","logOut","module","exports"],"sources":["C:/Users/hoang/OneDrive/Documents/test/node_modules/passport/lib/sessionmanager.js"],"sourcesContent":["var merge = require('utils-merge');\n\nfunction SessionManager(options, serializeUser) {\n  if (typeof options == 'function') {\n    serializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  \n  this._key = options.key || 'passport';\n  this._serializeUser = serializeUser;\n}\n\nSessionManager.prototype.logIn = function(req, user, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  \n  if (!req.session) { return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?')); }\n  \n  var self = this;\n  var prevSession = req.session;\n  \n  // regenerate the session, which is good practice to help\n  // guard against forms of session fixation\n  req.session.regenerate(function(err) {\n    if (err) {\n      return cb(err);\n    }\n    \n    self._serializeUser(user, req, function(err, obj) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      if (!req.session[self._key]) {\n        req.session[self._key] = {};\n      }\n      // store user information in session, typically a user id\n      req.session[self._key].user = obj;\n      // save the session before redirection to ensure page\n      // load does not happen before session is saved\n      req.session.save(function(err) {\n        if (err) {\n          return cb(err);\n        }\n        cb();\n      });\n    });\n  });\n}\n\nSessionManager.prototype.logOut = function(req, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  options = options || {};\n  \n  if (!req.session) { return cb(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?')); }\n  \n  var self = this;\n  \n  // clear the user from the session object and save.\n  // this will ensure that re-using the old session id\n  // does not have a logged in user\n  if (req.session[this._key]) {\n    delete req.session[this._key].user;\n  }\n  var prevSession = req.session;\n  \n  req.session.save(function(err) {\n    if (err) {\n      return cb(err)\n    }\n  \n    // regenerate the session, which is good practice to help\n    // guard against forms of session fixation\n    req.session.regenerate(function(err) {\n      if (err) {\n        return cb(err);\n      }\n      if (options.keepSessionInfo) {\n        merge(req.session, prevSession);\n      }\n      cb();\n    });\n  });\n}\n\n\nmodule.exports = SessionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}