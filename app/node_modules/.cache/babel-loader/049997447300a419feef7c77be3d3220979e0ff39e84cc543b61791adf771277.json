{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar SessionStrategy = require('./strategies/session'),\n  SessionManager = require('./sessionmanager');\n\n/**\n * `Authenticator` constructor.\n *\n * @api public\n */\nfunction Authenticator() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  this.init();\n}\n\n/**\n * Initialize authenticator.\n *\n * @api protected\n */\nAuthenticator.prototype.init = function () {\n  this.framework(require('./framework/connect')());\n  this.use(new SessionStrategy({\n    key: this._key\n  }, this.deserializeUser.bind(this)));\n  this._sm = new SessionManager({\n    key: this._key\n  }, this.serializeUser.bind(this));\n};\n\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.use = function (name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n  if (!name) {\n    throw new Error('Authentication strategies must have a name');\n  }\n  this._strategies[name] = strategy;\n  return this;\n};\n\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.unuse = function (name) {\n  delete this._strategies[name];\n  return this;\n};\n\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.framework = function (fw) {\n  this._framework = fw;\n  return this;\n};\n\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.use(passport.initialize());\n *\n *     app.use(passport.initialize({ userProperty: 'currentUser' }));\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.initialize = function (options) {\n  options = options || {};\n  return this._framework.initialize(this, options);\n};\n\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authenticate = function (strategy, options, callback) {\n  return this._framework.authenticate(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authorize = function (strategy, options, callback) {\n  options = options || {};\n  options.assignProperty = 'account';\n  var fn = this._framework.authorize || this._framework.authenticate;\n  return fn(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.session = function (options) {\n  return this.authenticate('session', options);\n};\n\n// TODO: Make session manager pluggable\n/*\nAuthenticator.prototype.sessionManager = function(mgr) {\n  this._sm = mgr;\n  return this;\n}\n*/\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.serializeUser = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  }\n\n  // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n  var user = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  var stack = this._serializers;\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or serialized object was obtained, done\n    if (err || obj || obj === 0) {\n      return done(err, obj);\n    }\n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to serialize user into session'));\n    }\n    function serialized(e, o) {\n      pass(i + 1, e, o);\n    }\n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, user, serialized);\n      } else {\n        layer(user, serialized);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.deserializeUser = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  }\n\n  // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n  var obj = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  var stack = this._deserializers;\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or deserialized user was obtained, done\n    if (err || user) {\n      return done(err, user);\n    }\n    // a valid user existed when establishing the session, but that user has\n    // since been removed\n    if (user === null || user === false) {\n      return done(null, false);\n    }\n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to deserialize user out of session'));\n    }\n    function deserialized(e, u) {\n      pass(i + 1, e, u);\n    }\n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, obj, deserialized);\n      } else {\n        layer(obj, deserialized);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.transformAuthInfo = function (fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  }\n\n  // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n  var info = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  var stack = this._infoTransformers;\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or transformed info was obtained, done\n    if (err || tinfo) {\n      return done(err, tinfo);\n    }\n    var layer = stack[i];\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n    function transformed(e, t) {\n      pass(i + 1, e, t);\n    }\n    try {\n      var arity = layer.length;\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        transformed(null, t);\n      } else if (arity == 3) {\n        layer(req, info, transformed);\n      } else {\n        layer(info, transformed);\n      }\n    } catch (e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\nAuthenticator.prototype._strategy = function (name) {\n  return this._strategies[name];\n};\n\n/**\n * Expose `Authenticator`.\n */\nmodule.exports = Authenticator;","map":{"version":3,"names":["SessionStrategy","require","SessionManager","Authenticator","_key","_strategies","_serializers","_deserializers","_infoTransformers","_framework","init","prototype","framework","use","key","deserializeUser","bind","_sm","serializeUser","name","strategy","Error","unuse","fw","initialize","options","authenticate","callback","authorize","assignProperty","fn","session","req","done","push","user","undefined","stack","pass","i","err","obj","layer","serialized","e","o","arity","length","deserialized","u","transformAuthInfo","info","tinfo","transformed","t","_strategy","module","exports"],"sources":["C:/Users/hoang/OneDrive/Documents/test/node_modules/passport/lib/authenticator.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar SessionStrategy = require('./strategies/session')\n  , SessionManager = require('./sessionmanager');\n\n\n/**\n * `Authenticator` constructor.\n *\n * @api public\n */\nfunction Authenticator() {\n  this._key = 'passport';\n  this._strategies = {};\n  this._serializers = [];\n  this._deserializers = [];\n  this._infoTransformers = [];\n  this._framework = null;\n  \n  this.init();\n}\n\n/**\n * Initialize authenticator.\n *\n * @api protected\n */\nAuthenticator.prototype.init = function() {\n  this.framework(require('./framework/connect')());\n  this.use(new SessionStrategy({ key: this._key }, this.deserializeUser.bind(this)));\n  this._sm = new SessionManager({ key: this._key }, this.serializeUser.bind(this));\n};\n\n/**\n * Utilize the given `strategy` with optional `name`, overridding the strategy's\n * default name.\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy(...));\n *\n *     passport.use('api', new http.BasicStrategy(...));\n *\n * @param {String|Strategy} name\n * @param {Strategy} strategy\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.use = function(name, strategy) {\n  if (!strategy) {\n    strategy = name;\n    name = strategy.name;\n  }\n  if (!name) { throw new Error('Authentication strategies must have a name'); }\n  \n  this._strategies[name] = strategy;\n  return this;\n};\n\n/**\n * Un-utilize the `strategy` with given `name`.\n *\n * In typical applications, the necessary authentication strategies are static,\n * configured once and always available.  As such, there is often no need to\n * invoke this function.\n *\n * However, in certain situations, applications may need dynamically configure\n * and de-configure authentication strategies.  The `use()`/`unuse()`\n * combination satisfies these scenarios.\n *\n * Examples:\n *\n *     passport.unuse('legacy-api');\n *\n * @param {String} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.unuse = function(name) {\n  delete this._strategies[name];\n  return this;\n};\n\n/**\n * Setup Passport to be used under framework.\n *\n * By default, Passport exposes middleware that operate using Connect-style\n * middleware using a `fn(req, res, next)` signature.  Other popular frameworks\n * have different expectations, and this function allows Passport to be adapted\n * to operate within such environments.\n *\n * If you are using a Connect-compatible framework, including Express, there is\n * no need to invoke this function.\n *\n * Examples:\n *\n *     passport.framework(require('hapi-passport')());\n *\n * @param {Object} name\n * @return {Authenticator} for chaining\n * @api public\n */\nAuthenticator.prototype.framework = function(fw) {\n  this._framework = fw;\n  return this;\n};\n\n/**\n * Passport's primary initialization middleware.\n *\n * This middleware must be in use by the Connect/Express application for\n * Passport to operate.\n *\n * Options:\n *   - `userProperty`  Property to set on `req` upon login, defaults to _user_\n *\n * Examples:\n *\n *     app.use(passport.initialize());\n *\n *     app.use(passport.initialize({ userProperty: 'currentUser' }));\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.initialize = function(options) {\n  options = options || {};\n  return this._framework.initialize(this, options);\n};\n\n/**\n * Middleware that will authenticate a request using the given `strategy` name,\n * with optional `options` and `callback`.\n *\n * Examples:\n *\n *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);\n *\n *     passport.authenticate('local', function(err, user) {\n *       if (!user) { return res.redirect('/login'); }\n *       res.end('Authenticated!');\n *     })(req, res);\n *\n *     passport.authenticate('basic', { session: false })(req, res);\n *\n *     app.get('/auth/twitter', passport.authenticate('twitter'), function(req, res) {\n *       // request will be redirected to Twitter\n *     });\n *     app.get('/auth/twitter/callback', passport.authenticate('twitter'), function(req, res) {\n *       res.json(req.user);\n *     });\n *\n * @param {String} strategy\n * @param {Object} options\n * @param {Function} callback\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authenticate = function(strategy, options, callback) {\n  return this._framework.authenticate(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will authorize a third-party account using the given\n * `strategy` name, with optional `options`.\n *\n * If authorization is successful, the result provided by the strategy's verify\n * callback will be assigned to `req.account`.  The existing login session and\n * `req.user` will be unaffected.\n *\n * This function is particularly useful when connecting third-party accounts\n * to the local account of a user that is currently authenticated.\n *\n * Examples:\n *\n *    passport.authorize('twitter-authz', { failureRedirect: '/account' });\n *\n * @param {String} strategy\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.authorize = function(strategy, options, callback) {\n  options = options || {};\n  options.assignProperty = 'account';\n  \n  var fn = this._framework.authorize || this._framework.authenticate;\n  return fn(this, strategy, options, callback);\n};\n\n/**\n * Middleware that will restore login state from a session.\n *\n * Web applications typically use sessions to maintain login state between\n * requests.  For example, a user will authenticate by entering credentials into\n * a form which is submitted to the server.  If the credentials are valid, a\n * login session is established by setting a cookie containing a session\n * identifier in the user's web browser.  The web browser will send this cookie\n * in subsequent requests to the server, allowing a session to be maintained.\n *\n * If sessions are being utilized, and a login session has been established,\n * this middleware will populate `req.user` with the current user.\n *\n * Note that sessions are not strictly required for Passport to operate.\n * However, as a general rule, most web applications will make use of sessions.\n * An exception to this rule would be an API server, which expects each HTTP\n * request to provide credentials in an Authorization header.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n * Options:\n *   - `pauseStream`      Pause the request stream before deserializing the user\n *                        object from the session.  Defaults to _false_.  Should\n *                        be set to true in cases where middleware consuming the\n *                        request body is configured after passport and the\n *                        deserializeUser method is asynchronous.\n *\n * @param {Object} options\n * @return {Function} middleware\n * @api public\n */\nAuthenticator.prototype.session = function(options) {\n  return this.authenticate('session', options);\n};\n\n// TODO: Make session manager pluggable\n/*\nAuthenticator.prototype.sessionManager = function(mgr) {\n  this._sm = mgr;\n  return this;\n}\n*/\n\n/**\n * Registers a function used to serialize user objects into the session.\n *\n * Examples:\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.serializeUser = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._serializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of serializers, attempting\n  // to serialize a user\n  var user = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._serializers;\n  (function pass(i, err, obj) {\n    // serializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or serialized object was obtained, done\n    if (err || obj || obj === 0) { return done(err, obj); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to serialize user into session'));\n    }\n    \n    \n    function serialized(e, o) {\n      pass(i + 1, e, o);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, user, serialized);\n      } else {\n        layer(user, serialized);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to deserialize user objects out of the session.\n *\n * Examples:\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.deserializeUser = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._deserializers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of deserializers,\n  // attempting to deserialize a user\n  var obj = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._deserializers;\n  (function pass(i, err, user) {\n    // deserializers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or deserialized user was obtained, done\n    if (err || user) { return done(err, user); }\n    // a valid user existed when establishing the session, but that user has\n    // since been removed\n    if (user === null || user === false) { return done(null, false); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to deserialize user out of session'));\n    }\n    \n    \n    function deserialized(e, u) {\n      pass(i + 1, e, u);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 3) {\n        layer(req, obj, deserialized);\n      } else {\n        layer(obj, deserialized);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Registers a function used to transform auth info.\n *\n * In some circumstances authorization details are contained in authentication\n * credentials or loaded as part of verification.\n *\n * For example, when using bearer tokens for API authentication, the tokens may\n * encode (either directly or indirectly in a database), details such as scope\n * of access or the client to which the token was issued.\n *\n * Such authorization details should be enforced separately from authentication.\n * Because Passport deals only with the latter, this is the responsiblity of\n * middleware or routes further along the chain.  However, it is not optimal to\n * decode the same data or execute the same database query later.  To avoid\n * this, Passport accepts optional `info` along with the authenticated `user`\n * in a strategy's `success()` action.  This info is set at `req.authInfo`,\n * where said later middlware or routes can access it.\n *\n * Optionally, applications can register transforms to proccess this info,\n * which take effect prior to `req.authInfo` being set.  This is useful, for\n * example, when the info contains a client ID.  The transform can load the\n * client from the database and include the instance in the transformed info,\n * allowing the full set of client properties to be convieniently accessed.\n *\n * If no transforms are registered, `info` supplied by the strategy will be left\n * unmodified.\n *\n * Examples:\n *\n *     passport.transformAuthInfo(function(info, done) {\n *       Client.findById(info.clientID, function (err, client) {\n *         info.client = client;\n *         done(err, info);\n *       });\n *     });\n *\n * @api public\n */\nAuthenticator.prototype.transformAuthInfo = function(fn, req, done) {\n  if (typeof fn === 'function') {\n    return this._infoTransformers.push(fn);\n  }\n  \n  // private implementation that traverses the chain of transformers,\n  // attempting to transform auth info\n  var info = fn;\n\n  // For backwards compatibility\n  if (typeof req === 'function') {\n    done = req;\n    req = undefined;\n  }\n  \n  var stack = this._infoTransformers;\n  (function pass(i, err, tinfo) {\n    // transformers use 'pass' as an error to skip processing\n    if ('pass' === err) {\n      err = undefined;\n    }\n    // an error or transformed info was obtained, done\n    if (err || tinfo) { return done(err, tinfo); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      // if no transformers are registered (or they all pass), the default\n      // behavior is to use the un-transformed info as-is\n      return done(null, info);\n    }\n    \n    \n    function transformed(e, t) {\n      pass(i + 1, e, t);\n    }\n    \n    try {\n      var arity = layer.length;\n      if (arity == 1) {\n        // sync\n        var t = layer(info);\n        transformed(null, t);\n      } else if (arity == 3) {\n        layer(req, info, transformed);\n      } else {\n        layer(info, transformed);\n      }\n    } catch(e) {\n      return done(e);\n    }\n  })(0);\n};\n\n/**\n * Return strategy with given `name`. \n *\n * @param {String} name\n * @return {Strategy}\n * @api private\n */\nAuthenticator.prototype._strategy = function(name) {\n  return this._strategies[name];\n};\n\n\n/**\n * Expose `Authenticator`.\n */\nmodule.exports = Authenticator;\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,sBAAsB,CAAC;EACjDC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;;AAGhD;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAAA,EAAG;EACvB,IAAI,CAACC,IAAI,GAAG,UAAU;EACtB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;EACrB,IAAI,CAACC,YAAY,GAAG,EAAE;EACtB,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,IAAI,CAACC,iBAAiB,GAAG,EAAE;EAC3B,IAAI,CAACC,UAAU,GAAG,IAAI;EAEtB,IAAI,CAACC,IAAI,EAAE;AACb;;AAEA;AACA;AACA;AACA;AACA;AACAP,aAAa,CAACQ,SAAS,CAACD,IAAI,GAAG,YAAW;EACxC,IAAI,CAACE,SAAS,CAACX,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC;EAChD,IAAI,CAACY,GAAG,CAAC,IAAIb,eAAe,CAAC;IAAEc,GAAG,EAAE,IAAI,CAACV;EAAK,CAAC,EAAE,IAAI,CAACW,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAClF,IAAI,CAACC,GAAG,GAAG,IAAIf,cAAc,CAAC;IAAEY,GAAG,EAAE,IAAI,CAACV;EAAK,CAAC,EAAE,IAAI,CAACc,aAAa,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;AAClF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,aAAa,CAACQ,SAAS,CAACE,GAAG,GAAG,UAASM,IAAI,EAAEC,QAAQ,EAAE;EACrD,IAAI,CAACA,QAAQ,EAAE;IACbA,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAGC,QAAQ,CAACD,IAAI;EACtB;EACA,IAAI,CAACA,IAAI,EAAE;IAAE,MAAM,IAAIE,KAAK,CAAC,4CAA4C,CAAC;EAAE;EAE5E,IAAI,CAAChB,WAAW,CAACc,IAAI,CAAC,GAAGC,QAAQ;EACjC,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,aAAa,CAACQ,SAAS,CAACW,KAAK,GAAG,UAASH,IAAI,EAAE;EAC7C,OAAO,IAAI,CAACd,WAAW,CAACc,IAAI,CAAC;EAC7B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,aAAa,CAACQ,SAAS,CAACC,SAAS,GAAG,UAASW,EAAE,EAAE;EAC/C,IAAI,CAACd,UAAU,GAAGc,EAAE;EACpB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApB,aAAa,CAACQ,SAAS,CAACa,UAAU,GAAG,UAASC,OAAO,EAAE;EACrDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,OAAO,IAAI,CAAChB,UAAU,CAACe,UAAU,CAAC,IAAI,EAAEC,OAAO,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,aAAa,CAACQ,SAAS,CAACe,YAAY,GAAG,UAASN,QAAQ,EAAEK,OAAO,EAAEE,QAAQ,EAAE;EAC3E,OAAO,IAAI,CAAClB,UAAU,CAACiB,YAAY,CAAC,IAAI,EAAEN,QAAQ,EAAEK,OAAO,EAAEE,QAAQ,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,aAAa,CAACQ,SAAS,CAACiB,SAAS,GAAG,UAASR,QAAQ,EAAEK,OAAO,EAAEE,QAAQ,EAAE;EACxEF,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACv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"},"metadata":{},"sourceType":"script","externalDependencies":[]}