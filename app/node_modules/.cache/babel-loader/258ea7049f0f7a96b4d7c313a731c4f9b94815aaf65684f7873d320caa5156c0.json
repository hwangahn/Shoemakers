{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar IncomingMessageExt = require('../http/request');\n\n/**\n * Passport initialization.\n *\n * Intializes Passport for incoming requests, allowing authentication strategies\n * to be applied.\n *\n * If sessions are being utilized, applications must set up Passport with\n * functions to serialize a user into and out of a session.  For example, a\n * common pattern is to serialize just the user ID into the session (due to the\n * fact that it is desirable to store the minimum amount of data in a session).\n * When a subsequent request arrives for the session, the full User object can\n * be loaded from the database by ID.\n *\n * Note that additional middleware is required to persist login state, so we\n * must use the `connect.session()` middleware _before_ `passport.initialize()`.\n *\n * If sessions are being used, this middleware must be in use by the\n * Connect/Express application for Passport to operate.  If the application is\n * entirely stateless (not using sessions), this middleware is not necessary,\n * but its use will not have any adverse impact.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @return {Function}\n * @api public\n */\nmodule.exports = function initialize(passport, options) {\n  options = options || {};\n  return function initialize(req, res, next) {\n    req.login = req.logIn = req.logIn || IncomingMessageExt.logIn;\n    req.logout = req.logOut = req.logOut || IncomingMessageExt.logOut;\n    req.isAuthenticated = req.isAuthenticated || IncomingMessageExt.isAuthenticated;\n    req.isUnauthenticated = req.isUnauthenticated || IncomingMessageExt.isUnauthenticated;\n    req._sessionManager = passport._sm;\n    if (options.userProperty) {\n      req._userProperty = options.userProperty;\n    }\n    var compat = options.compat === undefined ? true : options.compat;\n    if (compat) {\n      // `passport@0.5.1` [removed][1] all internal use of `req._passport`.\n      // From the standpoint of this package, this should have been a\n      // non-breaking change.  However, some strategies (such as `passport-azure-ad`)\n      // depend directly on `passport@0.4.x` or earlier.  `require`-ing earlier\n      // versions of `passport` has the effect of monkeypatching `http.IncomingMessage`\n      // with `logIn`, `logOut`, `isAuthenticated` and `isUnauthenticated`\n      // functions that [expect][2] the `req._passport` property to exist.\n      // Since pre-existing functions on `req` are given [preference][3], this\n      // results in [issues][4].\n      //\n      // The changes here restore the expected properties needed when earlier\n      // versions of `passport` are `require`-ed.  This compatibility mode is\n      // enabled by default, and can be disabld by simply not `use`-ing `passport.initialize()`\n      // middleware or setting `compat: false` as an option to the middleware.\n      //\n      // An alternative approach to addressing this issue would be to not\n      // preferentially use pre-existing functions on `req`, but rather always\n      // overwrite `req.logIn`, etc. with the versions of those functions shiped\n      // with `authenticate()` middleware.  This option should be reconsidered\n      // in a future major version release.\n      //\n      // [1]: https://github.com/jaredhanson/passport/pull/875\n      // [2]: https://github.com/jaredhanson/passport/blob/v0.4.1/lib/http/request.js\n      // [3]: https://github.com/jaredhanson/passport/blob/v0.5.1/lib/middleware/authenticate.js#L96\n      // [4]: https://github.com/jaredhanson/passport/issues/877\n      passport._userProperty = options.userProperty || 'user';\n      req._passport = {};\n      req._passport.instance = passport;\n    }\n    next();\n  };\n};","map":{"version":3,"names":["IncomingMessageExt","require","module","exports","initialize","passport","options","req","res","next","login","logIn","logout","logOut","isAuthenticated","isUnauthenticated","_sessionManager","_sm","userProperty","_userProperty","compat","undefined","_passport","instance"],"sources":["C:/Users/hoang/OneDrive/Documents/test/node_modules/passport/lib/middleware/initialize.js"],"sourcesContent":["/**\n * Module dependencies.\n */\nvar IncomingMessageExt = require('../http/request');\n\n\n/**\n * Passport initialization.\n *\n * Intializes Passport for incoming requests, allowing authentication strategies\n * to be applied.\n *\n * If sessions are being utilized, applications must set up Passport with\n * functions to serialize a user into and out of a session.  For example, a\n * common pattern is to serialize just the user ID into the session (due to the\n * fact that it is desirable to store the minimum amount of data in a session).\n * When a subsequent request arrives for the session, the full User object can\n * be loaded from the database by ID.\n *\n * Note that additional middleware is required to persist login state, so we\n * must use the `connect.session()` middleware _before_ `passport.initialize()`.\n *\n * If sessions are being used, this middleware must be in use by the\n * Connect/Express application for Passport to operate.  If the application is\n * entirely stateless (not using sessions), this middleware is not necessary,\n * but its use will not have any adverse impact.\n *\n * Examples:\n *\n *     app.use(connect.cookieParser());\n *     app.use(connect.session({ secret: 'keyboard cat' }));\n *     app.use(passport.initialize());\n *     app.use(passport.session());\n *\n *     passport.serializeUser(function(user, done) {\n *       done(null, user.id);\n *     });\n *\n *     passport.deserializeUser(function(id, done) {\n *       User.findById(id, function (err, user) {\n *         done(err, user);\n *       });\n *     });\n *\n * @return {Function}\n * @api public\n */\nmodule.exports = function initialize(passport, options) {\n  options = options || {};\n  \n  return function initialize(req, res, next) {\n    req.login =\n    req.logIn = req.logIn || IncomingMessageExt.logIn;\n    req.logout =\n    req.logOut = req.logOut || IncomingMessageExt.logOut;\n    req.isAuthenticated = req.isAuthenticated || IncomingMessageExt.isAuthenticated;\n    req.isUnauthenticated = req.isUnauthenticated || IncomingMessageExt.isUnauthenticated;\n    \n    req._sessionManager = passport._sm;\n    \n    if (options.userProperty) {\n      req._userProperty = options.userProperty;\n    }\n    \n    var compat = (options.compat === undefined) ? true : options.compat;\n    if (compat) {\n      // `passport@0.5.1` [removed][1] all internal use of `req._passport`.\n      // From the standpoint of this package, this should have been a\n      // non-breaking change.  However, some strategies (such as `passport-azure-ad`)\n      // depend directly on `passport@0.4.x` or earlier.  `require`-ing earlier\n      // versions of `passport` has the effect of monkeypatching `http.IncomingMessage`\n      // with `logIn`, `logOut`, `isAuthenticated` and `isUnauthenticated`\n      // functions that [expect][2] the `req._passport` property to exist.\n      // Since pre-existing functions on `req` are given [preference][3], this\n      // results in [issues][4].\n      //\n      // The changes here restore the expected properties needed when earlier\n      // versions of `passport` are `require`-ed.  This compatibility mode is\n      // enabled by default, and can be disabld by simply not `use`-ing `passport.initialize()`\n      // middleware or setting `compat: false` as an option to the middleware.\n      //\n      // An alternative approach to addressing this issue would be to not\n      // preferentially use pre-existing functions on `req`, but rather always\n      // overwrite `req.logIn`, etc. with the versions of those functions shiped\n      // with `authenticate()` middleware.  This option should be reconsidered\n      // in a future major version release.\n      //\n      // [1]: https://github.com/jaredhanson/passport/pull/875\n      // [2]: https://github.com/jaredhanson/passport/blob/v0.4.1/lib/http/request.js\n      // [3]: https://github.com/jaredhanson/passport/blob/v0.5.1/lib/middleware/authenticate.js#L96\n      // [4]: https://github.com/jaredhanson/passport/issues/877\n      passport._userProperty = options.userProperty || 'user';\n      \n      req._passport = {};\n      req._passport.instance = passport;\n    }\n    \n    next();\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAGnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACtDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,OAAO,SAASF,UAAUA,CAACG,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACzCF,GAAG,CAACG,KAAK,GACTH,GAAG,CAACI,KAAK,GAAGJ,GAAG,CAACI,KAAK,IAAIX,kBAAkB,CAACW,KAAK;IACjDJ,GAAG,CAACK,MAAM,GACVL,GAAG,CAACM,MAAM,GAAGN,GAAG,CAACM,MAAM,IAAIb,kBAAkB,CAACa,MAAM;IACpDN,GAAG,CAACO,eAAe,GAAGP,GAAG,CAACO,eAAe,IAAId,kBAAkB,CAACc,eAAe;IAC/EP,GAAG,CAACQ,iBAAiB,GAAGR,GAAG,CAACQ,iBAAiB,IAAIf,kBAAkB,CAACe,iBAAiB;IAErFR,GAAG,CAACS,eAAe,GAAGX,QAAQ,CAACY,GAAG;IAElC,IAAIX,OAAO,CAACY,YAAY,EAAE;MACxBX,GAAG,CAACY,aAAa,GAAGb,OAAO,CAACY,YAAY;IAC1C;IAEA,IAAIE,MAAM,GAAId,OAAO,CAACc,MAAM,KAAKC,SAAS,GAAI,IAAI,GAAGf,OAAO,CAACc,MAAM;IACnE,IAAIA,MAAM,EAAE;MACV;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAf,QAAQ,CAACc,aAAa,GAAGb,OAAO,CAACY,YAAY,IAAI,MAAM;MAEvDX,GAAG,CAACe,SAAS,GAAG,CAAC,CAAC;MAClBf,GAAG,CAACe,SAAS,CAACC,QAAQ,GAAGlB,QAAQ;IACnC;IAEAI,IAAI,EAAE;EACR,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}